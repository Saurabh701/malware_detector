from androguard.core.bytecodes.dvm import DalvikVMFormat
from androguard.core.analysis.analysis import Analysis
from androguard.decompiler.decompiler import DecompilerDAD
from androguard.core.bytecodes.apk import APK
from androguard.core.analysis import analysis
from androguard.core.bytecodes import dvm
from co12 import SPECIAL_STRINGS, DB_REGEX, API_CALLS, PERMISSIONS
import math
import hashlib

# Extract all features for a given application
def extract_features(file_path):
    result = {}
    print('1.1')
    a, d, dx = AnalyzeAPK(file_path)
    print('1.2')
    vm = dvm.DalvikVMFormat(a.get_dex())
    print('1.3')
    vmx = analysis.Analysis(vm)
    print('1.4')
    #d.set_vmanalysis(dx)
    print('1.5')
    #d.set_decompiler(DecompilerDAD(d, dx))
    print('1.6')
   

    result['android_version_code'] = a.get_androidversion_code()
    result['android_version_name'] = a.get_androidversion_name()
    result['max_sdk'] = a.get_max_sdk_version()
    result['min_sdk'] = a.get_min_sdk_version()
    result['libraries'] = a.get_libraries()
    result['filename'] = a.get_filename()
    result['target_sdk'] = a.get_target_sdk_version()
    result['md5'] = hashlib.md5(a.get_raw()).hexdigest()
    result['sha256'] = hashlib.sha256(a.get_raw()).hexdigest()
    result['permissions'] = a.get_permissions()
    result['activities'] = a.get_activities()
    result['providers'] = a.get_providers()
    result['services'] = a.get_services()
    result['strings'] = dx.get_strings()
    result['class_names'] = [c.name for c in dx.get_classes()]
    result['method_names'] = [m.name for m in dx.get_methods()]
    result['field_names'] = [f.name for f in dx.get_fields()]
    result['is_native_code'] = 1 
    result['is_obfuscation'] = 1 
    result['is_crypto_code'] = 1 
    result['is_dyn_code'] = 1 
    result['is_reflection_code'] = 1 
    result['is_database'] = 1 

    s_list = []
    s_list.extend(result['class_names'])
    s_list.extend(result['method_names'])
    s_list.extend(result['field_names'])
    result['entropy_rate'] = entropy_rate(s_list)

    result['feature_vectors'] = {}

    # Search for the presence of api calls in a given apk
    result['feature_vectors']['api_calls'] = []
    for call in API_CALLS:
        status = 1 if dx.find_methods(".", call, ".") else 0
        result['feature_vectors']['api_calls'].append(status)

    # Search for the presence of permissions in a given apk        
    result['feature_vectors']['permissions'] = []
    for permission in PERMISSIONS:
        status = 1 if permission in result['permissions'] else 0
        result['feature_vectors']['permissions'].append(status)

    result['feature_vectors']['special_strings'] = []
    for word in SPECIAL_STRINGS:
        status = 1 if dx.find_strings(word) else 0
        result['feature_vectors']['special_strings'].append(status)

    return result


def entropy_rate(data):
    for s in data:
        prob = [float(s.count(c)) / len(s) for c in dict.fromkeys(list(s))]
        entropy = - sum([p * math.log(p) / math.log(2.0) for p in prob])
        p = 1.0 / len(data)
        idealize = -1.0 * len(data) * p * math.log(p) / math.log(2.0)
        return round((abs(idealize) - entropy) / idealize, 2)


def create_vector_single(apk):
    feature_vector = []

    feature_vector.extend(apk['feature_vectors']['permissions'])
    feature_vector.extend(apk['feature_vectors']['api_calls'])
    feature_vector.extend(apk['feature_vectors']['special_strings'])

    entropy_rate = int(apk['entropy_rate'])
    native = int(apk['is_crypto_code'])
    db = int(apk['is_database'])
    feature_vector.append(entropy_rate)
    feature_vector.append(native)
    feature_vector.append(db)


    return feature_vector